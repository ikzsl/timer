{"version":3,"sources":["components/countdown/countdown.mp3","components/timer/timer.js","components/countdown-input/countdown-input.js","components/countdown/countdown.js","App.js","index.js","logo.png"],"names":["module","exports","Timer","state","isPaused","startTime","Date","now","period","elapsedTime","isStopped","onMainButtonClick","poll","setInterval","tick","setState","prevState","clearInterval","onResetClick","this","mainButtonLabel","milliseconds","toString","slice","seconds","Math","floor","minutes","className","length","type","onClick","React","Component","CountdownInput","props","totalSeconds","onMinutesInputChange","onSecondsInputChange","onSliderChange","min","max","style","margin","value","onChange","tooltipVisible","step","defaultProps","sound","Howl","src","clip","loop","Countdown","play","inputValue1","percent","TabPane","Tabs","App","logo","alt","defaultActiveKey","tab","ClockCircleOutlined","key","RocketOutlined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.254210e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/countdown.d79d826a.mp3\";","import React from 'react';\nimport { Button } from 'antd';\n\nimport './timer.scss';\n\nclass Timer extends React.Component {\n  state = {\n    isPaused: true,\n    startTime: Date.now(),\n    period: '000',\n    elapsedTime: 0,\n    isStopped: true,\n  };\n\n  onMainButtonClick = () => {\n    const { isPaused } = this.state;\n\n    if (isPaused === true) {\n      this.poll = setInterval(this.tick, 57);\n      this.setState({\n        startTime: Date.now(),\n        isStopped: false,\n      });\n\n      this.setState((prevState) => ({\n        period: prevState.period,\n      }));\n    }\n\n    if (isPaused === false) {\n      clearInterval(this.poll);\n\n      this.setState((prevState) => ({\n        period: prevState.period,\n        elapsedTime: prevState.period,\n      }));\n    }\n\n    this.setState((prevState) => ({\n      isPaused: !prevState.isPaused,\n    }));\n  };\n\n  onResetClick = () => {\n    const { isPaused } = this.state;\n\n    if (isPaused === false) {\n      clearInterval(this.poll);\n      this.setState((prevState) => ({\n        period: prevState.period,\n        elapsedTime: prevState.period,\n        isPaused: true,\n      }));\n    }\n\n    if (isPaused === true) {\n      this.setState({\n        period: '000',\n        elapsedTime: 0,\n        isStopped: true,\n      });\n    }\n  };\n\n  tick = () => {\n    this.setState((prevState) => ({\n      period: prevState.elapsedTime + (Date.now() - prevState.startTime),\n    }));\n  };\n\n  render() {\n    const { isPaused, period, isStopped } = this.state;\n\n    const mainButtonLabel = isPaused ? 'Start' : 'Pause';\n    const milliseconds = period.toString().slice(-3);\n    const seconds = Math.floor((period / 1000) % 60);\n    const minutes = Math.floor(((period / 1000) % (60 * 60)) / 60);\n\n    return (\n      <div className=\"timer-container\">\n        <div className=\"display\">\n          <span>{minutes < 10 ? `0${minutes}` : minutes}</span>\n          <span>\n            :\n            {seconds < 10 ? `0${seconds}` : seconds}\n          </span>\n          <span>\n            :\n            {milliseconds.length < 3 ? `0${milliseconds}` : milliseconds}\n          </span>\n        </div>\n\n        <Button type=\"primary\" onClick={this.onMainButtonClick} className=\"button\">\n          {mainButtonLabel}\n        </Button>\n        <Button type=\"primary\" onClick={this.onResetClick} className=\"button\">\n          {isStopped ? null : 'Reset'}\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Slider, InputNumber } from 'antd';\n\nimport './countdown-input.scss';\n\nconst CountdownInput = (props) => {\n  const {\n    minutes,\n    seconds,\n    totalSeconds,\n    onMinutesInputChange,\n    onSecondsInputChange,\n    onSliderChange,\n  } = props;\n\n  return (\n    <div className=\"countdown-input-container\">\n      <InputNumber\n        min={0}\n        max={720}\n        style={{ margin: '0 16px' }}\n        value={minutes}\n        onChange={onMinutesInputChange}\n      />\n      <InputNumber\n        min={0}\n        max={60}\n        style={{ margin: '0 16px' }}\n        value={seconds}\n        onChange={onSecondsInputChange}\n      />\n      <Slider\n        tooltipVisible={false}\n        step={15}\n        min={0}\n        max={3600}\n        onChange={onSliderChange}\n        value={typeof totalSeconds === 'number' ? totalSeconds : 0}\n      />\n    </div>\n  );\n};\n\nCountdownInput.defaultProps = {\n  minutes: 0,\n  seconds: 0,\n  totalSeconds: 0,\n  onMinutesInputChange: () => {},\n  onSecondsInputChange: () => {},\n  onSliderChange: () => {},\n};\n\nCountdownInput.propTypes = {\n  minutes: PropTypes.number,\n  seconds: PropTypes.number,\n  totalSeconds: PropTypes.number,\n  onMinutesInputChange: PropTypes.func,\n  onSecondsInputChange: PropTypes.func,\n  onSliderChange: PropTypes.func,\n};\n\nexport default CountdownInput;\n","import React from 'react';\nimport { Button, Progress } from 'antd';\nimport { Howl } from 'howler';\nimport CountdownInput from '../countdown-input/countdown-input';\n\nimport './countdown.scss';\n\nimport clip from './countdown.mp3';\n\nconst sound = new Howl({\n  src: [clip],\n  loop: true,\n});\n\nclass Countdown extends React.Component {\n  state = {\n    minutes: 0,\n    seconds: 0,\n    totalSeconds: 0,\n    isPaused: true,\n    startTime: Date.now(),\n    period: '000',\n    elapsedTime: 0,\n  };\n\n  onMinutesInputChange = (value) => {\n    this.setState((prevState) => ({\n      minutes: value,\n      totalSeconds: value * 60 + prevState.seconds,\n    }));\n  };\n\n  onSecondsInputChange = (value) => {\n    this.setState((prevState) => ({\n      seconds: value,\n      totalSeconds: prevState.minutes * 60 + value,\n    }));\n  };\n\n  onSliderChange = (value) => {\n    this.setState({\n      totalSeconds: value,\n      minutes: Math.floor(value / 60),\n      seconds: value % 60,\n    });\n  };\n\n  onMainButtonClick = () => {\n    const { isPaused } = this.state;\n\n    if (isPaused === true) {\n      this.poll = setInterval(this.tick, 57);\n      this.setState({\n        startTime: Date.now(),\n      });\n\n      this.setState((prevState) => ({\n        period: prevState.period,\n      }));\n    }\n\n    if (isPaused === false) {\n      clearInterval(this.poll);\n\n      this.setState((prevState) => ({\n        period: prevState.period,\n        elapsedTime: prevState.period,\n      }));\n    }\n\n    this.setState((prevState) => ({\n      isPaused: !prevState.isPaused,\n    }));\n  };\n\n  onResetClick = () => {\n    const { isPaused } = this.state;\n\n    if (isPaused === false) {\n      clearInterval(this.poll);\n      this.setState((prevState) => ({\n        period: prevState.period,\n        elapsedTime: prevState.period,\n        isPaused: true,\n      }));\n    }\n\n    if (isPaused === true) {\n      this.setState({\n        period: '000',\n        elapsedTime: 0,\n      });\n    }\n  };\n\n  tick = () => {\n    const { period, totalSeconds } = this.state;\n    if (period >= totalSeconds) {\n      clearInterval(this.poll);\n      sound.play();\n    }\n    this.setState((prevState) => ({\n      period: Math.floor(prevState.elapsedTime + (Date.now() - prevState.startTime) / 1000),\n    }));\n  };\n\n  render() {\n    const {\n      isPaused, inputValue1, period, totalSeconds, minutes, seconds,\n    } = this.state;\n    const mainButtonLabel = isPaused ? 'Start' : 'Pause';\n\n    return (\n      <div className=\"countdown-container\">\n        <div className=\"countdown-result\">\n          <div className=\"display\">\n            {`${Math.floor((inputValue1 - period) / 60)}:${(inputValue1 - period) % 60}`}\n          </div>\n          <Progress type=\"circle\" percent={Math.floor((100 * period) / inputValue1)} />\n        </div>\n        <CountdownInput\n          minutes={minutes}\n          seconds={seconds}\n          totalSeconds={totalSeconds}\n          onMinutesInputChange={this.onMinutesInputChange}\n          onSecondsInputChange={this.onSecondsInputChange}\n          onSliderChange={this.onSliderChange}\n        />\n        <Button type=\"primary\" onClick={this.onMainButtonClick} className=\"button\">\n          {mainButtonLabel}\n        </Button>\n        <Button type=\"primary\" onClick={this.onResetClick} className=\"button\">\n          Reset\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n","import React from 'react';\nimport { Tabs } from 'antd';\nimport { ClockCircleOutlined, RocketOutlined } from '@ant-design/icons';\nimport logo from './logo.png';\nimport './App.scss';\nimport Timer from './components/timer/timer';\nimport Countdown from './components/countdown/countdown';\n\nconst { TabPane } = Tabs;\n\nconst App = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </header>\n\n    <Tabs defaultActiveKey=\"2\">\n      <TabPane\n        tab={(\n          <span>\n            <ClockCircleOutlined />\n            Timer\n          </span>\n        )}\n        key=\"1\"\n      >\n        <h2>Timer</h2>\n        <Timer />\n      </TabPane>\n      <TabPane\n        tab={(\n          <span>\n            <RocketOutlined />\n            Countdown\n          </span>\n        )}\n        key=\"2\"\n      >\n        <h2>Countdown</h2>\n        <Countdown />\n      </TabPane>\n    </Tabs>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/logo.06b43fd4.png\";"],"sourceRoot":""}